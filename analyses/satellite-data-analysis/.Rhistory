p11 <- p11 + draw_plot(p5 + theme(legend.position = "top", legend.box = "horizontal"), 0, 0, 1, 1)
p11 <- p11 + draw_plot(p6, 0.31, 0.475, 0.29, 0.29)
p12 <- ggdraw()
p12 <- p12 + draw_plot(p7 + theme(legend.position = "top", legend.box = "horizontal"), 0, 0, 1, 1)
p12 <- p12 + draw_plot(p8, 0.31, 0.475, 0.29, 0.29)
plot_grid(p9, p10, p11, p12)
plot_grid(p9, p10, p11, p12)
epidist
diag(epidist)
diag(as.matrix(epidist))
diag-1(as.matrix(epidist))
epidist[row(epidist) == (col(epidist) - 1)]
epidist2 <- as.matrix(epidist2))
epidist2 <- as.matrix(epidist)
epidist[row(epidist2) == (col(epidist2) - 1)]
View(epidist2)
epidist2[row(epidist2) == (col(epidist2) - 1)]
epidist3 <- epidist2[row(epidist2) == (col(epidist2) - 1)]
epidd_dist3
inshore_epidist <- epidist3[c(1:2)]
inshore_epidist <- epidist3[c(1,3,9,11)]
offshore_epidist <- epidist3[c(5,7,13,15)]
boxplot(inshore_epidist, offshore_epidist)
t.test(inshore_epidist, offshore_epidist)
bartlett.testinshore_epidist, offshore_epidist) #variances not sig. different
bartlett.test(inshore_epidist, offshore_epidist) #variances not sig. different
inshoreoffshore <- cbdind(epidist3[c(1,3,9,11)], epidist3[c(5,7,13,15)])
inshoreoffshore <- cbind(epidist3[c(1,3,9,11)], epidist3[c(5,7,13,15)])
View(inshoreoffshore)
boxplot(inshoreoffshore$V1, inshoreoffshore$V2)
boxplot(inshoreoffshore[,1], inshoreoffshore[,2])
bartlett.test(inshoreoffshore$V1 ~ inshoreoffshore$V2) #variances not sig. different
bartlett.test(inshoreoffshore[,1] ~ inshoreoffshore[,2]) #variances not sig. different
bartlett.test(inshoreoffshore[,1] ~ inshoreoffshore[,2], data = inshoreoffshore) #variances not sig. different
bartlett.test(V1 ~ V2, data = inshoreoffshore) #variances not sig. different
inshoreoffshore <- as.data.frame(cbind(epidist3[c(1,3,9,11)], epidist3[c(5,7,13,15)]))
boxplot(inshoreoffshore[,1], inshoreoffshore[,2])
bartlett.test(V1 ~ V2, data = inshoreoffshore) #variances not sig. different
bartlett.test(inshoreoffshore$V1 ~ inshoreoffshore$V2) #variances not sig. different
inshoreoffshore$V1
bartlett.test(inshoreoffshore$V1 ~ inshoreoffshore$V2) #variances not sig. different
inshoreoffshore <- as.data.frame(cbind(epidist3[c(1,3,9,11,5,7,13,15)],
seq("Inshore", "Offshore", 4)))
inshoreoffshore <- as.data.frame(cbind(epidist3[c(1,3,9,11,5,7,13,15)],
seq(c("Inshore", "Offshore"), 4)))
inshoreoffshore <- as.data.frame(cbind(epidist3[c(1,3,9,11,5,7,13,15)],
c("Inshore", "Inshore", "Inshore", "Inshore",
"Offshore", "Offshore", "Offshore", "Offshore")))
boxplot(inshoreoffshore$V1 ~ inshoreoffshore$V2)
inshoreoffshore$V1 <- as.numeric(inshoreoffshore$V1)
inshoreoffshore <- as.data.frame(cbind(epidist3[c(1,3,9,11,5,7,13,15)],
c("Inshore", "Inshore", "Inshore", "Inshore",
"Offshore", "Offshore", "Offshore", "Offshore")))
inshoreoffshore$V1 <- as.numeric(as.character(inshoreoffshore$V1))
boxplot(inshoreoffshore$V1 ~ inshoreoffshore$V2)
bartlett.test(inshoreoffshore$V1 ~ inshoreoffshore$V2) #variances not sig. different
t.test(inshoreoffshore$V1 ~ inshoreoffshore$V2, var.equal = TRUE)
View(Epidata2)
View(Epidata3)
Epidata3 <- Epidata2[,c(39:48,61:74,75:78,85:92)]
Epidata4 <- Epidata3[apply(Epidata3[c(seq(1, 36, by = 2))],1,
function(z) !any(z<=15)),] #increased from z==0
counts <- DGEList(counts=Epidata4)
counts$samples
#TMM normalization (corrects for library size)
counts2 <- calcNormFactors(counts)
counts2$samples
#extract normalized counts
counts2_cpm <- cpm(counts2, normalized.lib.sizes=TRUE, log=TRUE)
##Plots to show ddRAD vs EpiRAD library (before normalization)
par(mfrow = c(5, 5))
par(mar = c(2, 2 ,2 ,2), oma = c(4, 4, 0.5, 0.5))
for (i in seq(1,ncol(Epidata4), by = 2)){
plot(Epidata4[,i], Epidata4[,i+1], main = colnames(Epidata4[i]), col = "blue")
}
#plot normalized counts
par(mfrow = c(5, 5))
par(mar = c(2, 2, 2, 2), oma = c(4, 4, 0.5, 0.5))
for (i in seq(1,ncol(counts2_cpm), by = 2)){
plot(counts2_cpm[,i], counts2_cpm[,i+1], main = colnames(counts2_cpm[i]), col = "blue")
}
##################################################################
#Using lm to get residuals
models <- list()
for (i in seq(1,ncol(counts2_cpm), by = 2)){
models[[colnames(counts2_cpm)[i]]] <- lm(counts2_cpm[,i+1] ~ counts2_cpm[,i])
}
residuals <- lapply(models, '[[', 2)
resid_all <- as.data.frame(residuals)
#plot residuals
par(mfrow = c(5, 5))
par(mar = c(2,2, 2, 2), oma = c(4, 4, 0.5, 0.5))
for (i in 1:ncol(resid_all)){
plot(resid_all[,i], col = "blue", ylim = c(-10, 4))
}
#Use k-means clustering to obtain methylated and unmethylated loci
set.seed(1234)
clusters <- lapply(residuals, kmeans, 2)
clusters2 <- lapply(clusters, '[[', 1)
clusters3 <- as.data.frame(clusters2)
clusters3[,c(2,4,5,8,10,12:14)] <-ifelse(clusters3[,c(2,4,5,8,10,12:14)] == 2, 1, 2)
clusters4 <- as.matrix(clusters3)
#plot residuals with k-means colors
par(mfrow = c(5, 5))
par(mar = c(2,2, 2, 2), oma = c(4, 4, 0.5, 0.5))
for (i in 1:ncol(resid_all)){
plot(resid_all[,i], col = clusters4[,i], ylim = c(-10, 4))
}
heatmap(clusters4, scale = "none")
View(clusters4)
View(clusters3)
for (i in 1:ncol(resid_all)){
plot(resid_all[,i], col = clusters4[,i], ylim = c(-10, 4))
}
View(clusters4)
clusters3[,c(1,3,7,10,11,14,18)] <-ifelse(clusters3[,c(1,3,7,10,11,14,18)] == 2, 1, 2) #c(2,4,5,8,10,12:14)
clusters4 <- as.matrix(clusters3)
par(mfrow = c(5, 5))
par(mar = c(2,2, 2, 2), oma = c(4, 4, 0.5, 0.5))
for (i in 1:ncol(resid_all)){
plot(resid_all[,i], col = clusters4[,i], ylim = c(-10, 4))
}
heatmap(clusters4, scale = "none")
resid_all_binary <- clusters4-1
prop_methyl <- colSums(resid_all_binary) / nrow(resid_all_binary)
dens <- density(prop_methyl)
par(mfrow = c(1, 1))
par(mar = c(5, 4, 4, 2))
plot(dens, xlab = "Methylation", ylab = "Density", main = "")
mean(prop_methyl) #0.181
sd(prop_methyl) #0.01
names <- c("pa10-15", "pa10-16", "pa11-15", "pa11-16", "pa11h-16", "pa2-15", "pa2-16", "pa3-15",
"pa3-16", "pa5-15", "pa5-16", "pa5h-16", "pa6-15", "pa6-16", "pa8-15", "pa8-16",
"pa9-15", "pa9-16")
colnames(resid_all_binary) <- names
resid_t_binary <- t(resid_all_binary)
epidist <- dist(resid_t_binary)
epifit <- cmdscale(epidist,eig=TRUE, k=2)
epix <- epifit$points[,1]
epiy <- epifit$points[,2]
layout(matrix(c(1, 1, 2,
1, 1, 3), nrow=2, byrow=TRUE))
layout.show(n=3)
plot(epix, epiy, xlab="Coordinate 1", ylab="Coordinate 2", type = 'n', main = "A")
for (i in seq(1,17, by = 2)){
arrows(epix[i], epiy[i], epix[i+1], epiy[i+1], length = 0.1, col = "gray")
}
names2 <- c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10)
palette(brewer.pal(n = 8, name = "Set2"))
text(epix, epiy, labels = row.names(resid_t_binary), cex=.7, font = 2)
Epidata4 <- Epidata3[apply(Epidata3[c(seq(1, 4, by = 2))],1,
function(z) !any(z<=15)),] #increased from z==0
View(Epidata4)
Epidata4 <- Epidata3[apply(Epidata3[c(seq(1, 4, by = 2))],1,
function(z) !any(z<=15)),] #increased from z==0
Epidata3 <- Epidata2[,c(1:4)] #39:48,61:74,75:78,85:92
Epidata4 <- Epidata3[apply(Epidata3[c(seq(1, 4, by = 2))],1,
function(z) !any(z<=15)),] #increased from z==0
View(Epidata4)
Epidata3 <- Epidata2[,c(3:6)] #39:48,61:74,75:78,85:92
View(Epidata4)
Epidata3 <- Epidata2[,c(39:42)] #39:48,61:74,75:78,85:92
Epidata4 <- Epidata3[apply(Epidata3[c(seq(1, 4, by = 2))],1,
function(z) !any(z<=15)),] #increased from z==0
View(Epidata4)
# Now use edgeR package to standardize EpiRAD count data by library size
#read in the file for edgeR
counts <- DGEList(counts=Epidata4)
counts$samples
#TMM normalization (corrects for library size)
counts2 <- calcNormFactors(counts)
counts2$samples
#extract normalized counts
counts2_cpm <- cpm(counts2, normalized.lib.sizes=TRUE, log=TRUE)
##Plots to show ddRAD vs EpiRAD library (before normalization)
par(mfrow = c(5, 5))
par(mar = c(2, 2 ,2 ,2), oma = c(4, 4, 0.5, 0.5))
for (i in seq(1,ncol(Epidata4), by = 2)){
plot(Epidata4[,i], Epidata4[,i+1], main = colnames(Epidata4[i]), col = "blue")
}
#plot normalized counts
par(mfrow = c(5, 5))
par(mar = c(2, 2, 2, 2), oma = c(4, 4, 0.5, 0.5))
for (i in seq(1,ncol(counts2_cpm), by = 2)){
plot(counts2_cpm[,i], counts2_cpm[,i+1], main = colnames(counts2_cpm[i]), col = "blue")
}
##################################################################
#Using lm to get residuals
models <- list()
for (i in seq(1,ncol(counts2_cpm), by = 2)){
models[[colnames(counts2_cpm)[i]]] <- lm(counts2_cpm[,i+1] ~ counts2_cpm[,i])
}
residuals <- lapply(models, '[[', 2)
resid_all <- as.data.frame(residuals)
#plot residuals
par(mfrow = c(5, 5))
par(mar = c(2,2, 2, 2), oma = c(4, 4, 0.5, 0.5))
for (i in 1:ncol(resid_all)){
plot(resid_all[,i], col = "blue", ylim = c(-10, 4))
}
set.seed(1234)
clusters <- lapply(residuals, kmeans, 2)
clusters2 <- lapply(clusters, '[[', 1)
clusters3 <- as.data.frame(clusters2)
View(clusters3)
clusters4 <- as.matrix(clusters3)
par(mfrow = c(5, 5))
par(mar = c(2,2, 2, 2), oma = c(4, 4, 0.5, 0.5))
for (i in 1:ncol(resid_all)){
plot(resid_all[,i], col = clusters4[,i], ylim = c(-10, 4))
}
heatmap(clusters4, scale = "none")
Epidata3 <- Epidata2[,c(43:46)] #39:48,61:74,75:78,85:92
Epidata4 <- Epidata3[apply(Epidata3[c(seq(1, 4, by = 2))],1,
function(z) !any(z<=15)),] #increased from z==0
counts <- DGEList(counts=Epidata4)
counts$samples
#TMM normalization (corrects for library size)
counts2 <- calcNormFactors(counts)
counts2$samples
#extract normalized counts
counts2_cpm <- cpm(counts2, normalized.lib.sizes=TRUE, log=TRUE)
##Plots to show ddRAD vs EpiRAD library (before normalization)
par(mfrow = c(5, 5))
par(mar = c(2, 2 ,2 ,2), oma = c(4, 4, 0.5, 0.5))
for (i in seq(1,ncol(Epidata4), by = 2)){
plot(Epidata4[,i], Epidata4[,i+1], main = colnames(Epidata4[i]), col = "blue")
}
#plot normalized counts
par(mfrow = c(5, 5))
par(mar = c(2, 2, 2, 2), oma = c(4, 4, 0.5, 0.5))
for (i in seq(1,ncol(counts2_cpm), by = 2)){
plot(counts2_cpm[,i], counts2_cpm[,i+1], main = colnames(counts2_cpm[i]), col = "blue")
}
##################################################################
#Using lm to get residuals
models <- list()
for (i in seq(1,ncol(counts2_cpm), by = 2)){
models[[colnames(counts2_cpm)[i]]] <- lm(counts2_cpm[,i+1] ~ counts2_cpm[,i])
}
residuals <- lapply(models, '[[', 2)
resid_all <- as.data.frame(residuals)
#plot residuals
par(mfrow = c(5, 5))
par(mar = c(2,2, 2, 2), oma = c(4, 4, 0.5, 0.5))
for (i in 1:ncol(resid_all)){
plot(resid_all[,i], col = "blue", ylim = c(-10, 4))
}
#Use k-means clustering to obtain methylated and unmethylated loci
set.seed(1234)
clusters <- lapply(residuals, kmeans, 2)
clusters2 <- lapply(clusters, '[[', 1)
clusters3 <- as.data.frame(clusters2)
clusters3[,2] <-ifelse(clusters3[,2] == 2, 1, 2) #c(2,4,5,8,10,12:14)
clusters4 <- as.matrix(clusters3)
par(mfrow = c(5, 5))
par(mar = c(2,2, 2, 2), oma = c(4, 4, 0.5, 0.5))
for (i in 1:ncol(resid_all)){
plot(resid_all[,i], col = clusters4[,i], ylim = c(-10, 4))
}
heatmap(clusters4, scale = "none")
Epidata_10 <- Epidata2[,c(39:42)]
Epidata_11 <- Epidata2[,c(43:46)]
Epidata_02 <- Epidata2[,c(61:64)]
Epidata_03 <- Epidata2[,c(65:68)]
Epidata_05 <- Epidata2[,c(69:72)]
Epidata_06 <- Epidata2[,c(75:78)]
Epidata_08 <- Epidata2[,c(85:88)]
Epidata_09 <- Epidata2[,c(89:92)]
Epidata_10_1 <- Epidata_10[apply(Epidata_10[c(seq(1, ncol(Epidata_10), by = 2))],1,
function(z) !any(z <= 15)), ] #increased from z==0
Epidata_11_1 <- Epidata_11[apply(Epidata_11[c(seq(1, ncol(Epidata_11), by = 2))],1,
function(z) !any(z <= 15)), ] #increased from z==0
Epidata_02_1 <- Epidata_02[apply(Epidata_02[c(seq(1, ncol(Epidata_02), by = 2))],1,
function(z) !any(z <= 15)), ] #increased from z==0
Epidata_03_1 <- Epidata_03[apply(Epidata_03[c(seq(1, ncol(Epidata_03), by = 2))],1,
function(z) !any(z <= 15)), ] #increased from z==0
Epidata_05_1 <- Epidata_05[apply(Epidata_05[c(seq(1, ncol(Epidata_05), by = 2))],1,
function(z) !any(z <= 15)), ] #increased from z==0
Epidata_06_1 <- Epidata_06[apply(Epidata_06[c(seq(1, ncol(Epidata_06), by = 2))],1,
function(z) !any(z <= 15)), ] #increased from z==0
Epidata_08_1 <- Epidata_08[apply(Epidata_08[c(seq(1, ncol(Epidata_08), by = 2))],1,
function(z) !any(z <= 15)), ] #increased from z==0
Epidata_09_1 <- Epidata_09[apply(Epidata_09[c(seq(1, ncol(Epidata_09), by = 2))],1,
function(z) !any(z <= 15)), ] #increased from z==0
Epidata4 <- list(Epidata_10_1, Epidata_11_1, Epidata_02_1, Epidata_03_1, Epidata_05_1,
Epidata_06_1, Epidata_08_1, Epidata_09_1)
par(mfrow = c(5, 5))
par(mar = c(2, 2 ,2 ,2), oma = c(4, 4, 0.5, 0.5))
for (i in seq(1,ncol(Epidata4[[1]]), by = 2)){
for (j in 1:8){
plot(Epidata4[[j]][,i], Epidata4[[j]][,i+1], main = colnames(Epidata4[[j]][i]), col = "blue")
}
}
counts <- lapply(Epidata4, DGEList)
counts
counts2 <- lapply(counts, calcNormFactors)
counts2
counts2_cpm <- lapply(counts2, cpm, normalized.lib.sizes=TRUE, log=TRUE)
par(mfrow = c(5, 5))
par(mar = c(2, 2 ,2 ,2), oma = c(4, 4, 0.5, 0.5))
for (i in seq(1,ncol(counts2_cpm[[1]]), by = 2)){
for (j in 1:8){
plot(counts2_cpm[[j]][,i], counts2_cpm[[j]][,i+1], main = colnames(counts2_cpm[[j]][i]), col = "blue")
}
}
model_10_15 <- lm(counts2_cpm[[1]][,2] ~ counts2_cpm[[1]][,1])
model_10_16 <- lm(counts2_cpm[[1]][,4] ~ counts2_cpm[[1]][,3])
model_11_15 <- lm(counts2_cpm[[2]][,2] ~ counts2_cpm[[2]][,1])
model_11_16 <- lm(counts2_cpm[[2]][,4] ~ counts2_cpm[[2]][,3])
model_02_15 <- lm(counts2_cpm[[3]][,2] ~ counts2_cpm[[3]][,1])
model_02_16 <- lm(counts2_cpm[[3]][,4] ~ counts2_cpm[[3]][,3])
model_03_15 <- lm(counts2_cpm[[4]][,2] ~ counts2_cpm[[4]][,1])
model_03_16 <- lm(counts2_cpm[[4]][,4] ~ counts2_cpm[[4]][,3])
model_05_15 <- lm(counts2_cpm[[5]][,2] ~ counts2_cpm[[5]][,1])
model_05_16 <- lm(counts2_cpm[[5]][,4] ~ counts2_cpm[[5]][,3])
model_06_15 <- lm(counts2_cpm[[6]][,2] ~ counts2_cpm[[6]][,1])
model_06_16 <- lm(counts2_cpm[[6]][,4] ~ counts2_cpm[[6]][,3])
model_08_15 <- lm(counts2_cpm[[7]][,2] ~ counts2_cpm[[7]][,1])
model_08_16 <- lm(counts2_cpm[[7]][,4] ~ counts2_cpm[[7]][,3])
model_09_15 <- lm(counts2_cpm[[8]][,2] ~ counts2_cpm[[8]][,1])
model_09_16 <- lm(counts2_cpm[[8]][,4] ~ counts2_cpm[[8]][,3])
models <- list(model_10_15, model_10_16, model_11_15, model_11_16, model_02_15,
model_02_16, model_03_15, model_03_16, model_05_15, model_05_16,
model_06_15, model_06_16, model_08_15, model_08_16, model_09_15, model_09_16)
residuals <- lapply(models, '[[', 2)
par(mfrow = c(5, 5))
par(mar = c(2, 2 ,2 ,2), oma = c(4, 4, 0.5, 0.5))
for (i in 1:length(residuals)){
plot(residuals[[i]], col = "blue", ylim = c(-10, 4))
}
set.seed(1234)
clusters <- lapply(residuals, kmeans, 2)
clusters2 <- lapply(clusters, '[[', 1)
clusters3 <- lapply(clusters2[c(3,4,5,6,7,11,12,13,14,15)], function(x) ifelse(x == 2, 1, 2))
clusters4 <- list(clusters2[[1]], clusters2[[2]], clusters3[[1]], clusters3[[2]],
clusters3[[3]], clusters3[[4]], clusters3[[5]], clusters2[[8]],
clusters2[[9]], clusters2[[10]], clusters3[[6]], clusters3[[7]],
clusters3[[8]], clusters3[[9]], clusters3[[10]], clusters2[[16]])
par(mfrow = c(5, 5))
par(mar = c(2,2, 2, 2), oma = c(4, 4, 0.5, 0.5))
for (i in 1:length(clusters4)){
plot(residuals[[i]], col = clusters4[[i]], ylim = c(-10, 4))
}
Sym_resid_all_binary <- lapply(clusters4, function(x) x-1)
Sym_prop_methyl <- lapply(Sym_resid_all_binary, function(x) sum(x) / length(x))
Sym_prop_methyl
View(atten_summary)
View(sst_summary)
View(sst_corals)
View(chla_summary)
View(inshore_atten)
mean(inshore_atten)
mean(inshore_atten, na.rm = TRUE)
apply(sst_corals, 1, mean)
apply(sst_corals, 2, mean)
apply(sst_corals[,2:13], 2, mean)
apply(sst_corals[,2:13], 1, mean)
sst_mean <- apply(sst_corals[,2:13], 1, mean)
sst_mean2 <- cbind(sst_corals$Location, sst_mean)
View(sst_mean2)
bartlett.test(sst_mean ~ V1, data = sst_mean2) #variances not sig. different
t.test(sst_mean ~ V1, data = sst_mean2, var.equal = TRUE, paired = FALSE) #p-value = 0.5685
sst_range <- apply(sst_corals[,2:13], 1, function(x) max(x)-min(x))
sst_range2 <- cbind(sst_corals$Location, sst_range)
View(sst_range2)
bartlett.test(sst_range ~ V1, data = sst_range2) #variances not sig. different
t.test(sst_range ~ V1, data = sst_range2, var.equal = TRUE, paired = FALSE) #p-value = 0.5685
View(chla_summary)
inshore_chl
View(inshore_chl)
inshore_chl2 <- apply(inshore_chl, 1, mean)
inshore_chl2 <- apply(inshore_chl, 1, mean, na.rm = TRUE)
inshore_chl2
offshore_chl2 <- apply(offshore_chl, 1, mean, na.rm = TRUE)
chl_mean2 <- rbind(inshore_chl2, offshore_chl2)
View(chl_mean2)
chl_mean2 <- cbind(inshore_chl2, offshore_chl2)
chl_mean2 <- c(inshore_chl2, offshore_chl2)
chl_mean2 <- cbind(c(rep("Inshore",4),rep("Offshore",4)),c(inshore_chl2, offshore_chl2))
View(chl_mean2)
bartlett.test(V1 ~ V2, data = chl_mean2) #variances not sig. different
bartlett.test(V2 ~ V1, data = chl_mean2) #variances not sig. different
chl_mean2$V2 <- as.numeric(as.character(chl_mean2$V2))
chl_mean2[,2] <- as.numeric(as.character(chl_mean2[,2]))
bartlett.test(V2 ~ V1, data = chl_mean2) #variances not sig. different
chl_mean2[,1] <- as.factor(chl_mean2[,2])
bartlett.test(V2 ~ V1, data = chl_mean2) #variances not sig. different
chl_mean2[,1] <- as.factor(chl_mean2[,1])
bartlett.test(V2 ~ V1, data = chl_mean2) #variances not sig. different
inshore_chl2 <- apply(inshore_chl, 1, mean, na.rm = TRUE)
offshore_chl2 <- apply(offshore_chl, 1, mean, na.rm = TRUE)
chl_mean2 <- cbind(c(rep("Inshore",4),rep("Offshore",4)),c(inshore_chl2, offshore_chl2))
chl_mean2[,1] <- as.factor(chl_mean2[,1])
bartlett.test(V2 ~ V1, data = chl_mean2) #variances not sig. different
chl_mean2[,2] <- as.numeric(as.character(chl_mean2[,2]))
bartlett.test(V2 ~ V1, data = chl_mean2) #variances not sig. different
is.factor(chl_mean2[,1])
chl_mean2[,1] <- as.factor(chl_mean2[,1])
inshore_chl2 <- apply(inshore_chl, 1, mean, na.rm = TRUE)
offshore_chl2 <- apply(offshore_chl, 1, mean, na.rm = TRUE)
chl_mean2 <- cbind(c(rep("Inshore",4),rep("Offshore",4)),c(inshore_chl2, offshore_chl2))
chl_mean2[,1] <- as.factor(chl_mean2[,1])
inshore_chl2 <- apply(inshore_chl, 1, mean, na.rm = TRUE)
offshore_chl2 <- apply(offshore_chl, 1, mean, na.rm = TRUE)
chl_mean2 <- cbind(c(rep("Inshore",4),rep("Offshore",4)),c(inshore_chl2, offshore_chl2))
chl_mean2[,1] <- as.factor(as.character(chl_mean2[,1]))
chl_mean2[,2] <- as.numeric(as.character(chl_mean2[,2]))
bartlett.test(V2 ~ V1, data = chl_mean2) #variances not sig. different
View(sst_range2)
View(chl_mean2)
chl_mean2 <- as.matrix(chl_mean2)
chl_mean2[,1] <- as.factor(as.character(chl_mean2[,1]))
chl_mean2[,2] <- as.numeric(as.character(chl_mean2[,2]))
inshore_chl2 <- apply(inshore_chl, 1, mean, na.rm = TRUE)
offshore_chl2 <- apply(offshore_chl, 1, mean, na.rm = TRUE)
chl_mean2 <- cbind(c(rep("Inshore",4),rep("Offshore",4)),c(inshore_chl2, offshore_chl2))
chl_mean2 <- as.matrix(chl_mean2)
chl_mean2[,1] <- as.factor(as.character(chl_mean2[,1]))
chl_mean2[,2] <- as.numeric(as.character(chl_mean2[,2]))
bartlett.test(V2 ~ V1, data = chl_mean2) #variances not sig. different
str(chl_mean2)
inshore_chl2 <- apply(inshore_chl, 1, mean, na.rm = TRUE)
offshore_chl2 <- apply(offshore_chl, 1, mean, na.rm = TRUE)
chl_mean2 <- cbind(c(rep("Inshore",4),rep("Offshore",4)),c(inshore_chl2, offshore_chl2))
chl_mean2 <- as.matrix(chl_mean2)
str(chl_mean2)
chl_mean2[,1] <- as.factor(as.character(chl_mean2[,1]))
chl_mean2[,2] <- as.numeric(as.character(chl_mean2[,2]))
str(chl_mean2)
chl_mean2$V1
str(sst_mean2)
View(sst_mean2)
chl_mean2[,2]
chl_mean2[,2] <- as.numeric(as.character(chl_mean2[,2]))
chl_mean2[,2]
chl_mean2[,2] <- sapply(chl_mean2[,2], as.numeric)
View(sst_mean2)
chl_mean2[,2]
bartlett.test(V2 ~ V1, data = chl_mean2) #variances not sig. different
inshore_chl2 <- apply(inshore_chl, 1, mean, na.rm = TRUE)
offshore_chl2 <- apply(offshore_chl, 1, mean, na.rm = TRUE)
chl_mean2 <- cbind(c(rep("Inshore",4),rep("Offshore",4)),c(inshore_chl2, offshore_chl2))
chl_mean2 <- as.matrix(chl_mean2)
chl_mean2[,1] <- as.factor(chl_mean2[,1])
chl_mean2[,2] <- sapply(chl_mean2[,2], as.numeric)
str(chl_mean2)
chl_mean2 <- as.data.frame(cbind(c(rep("Inshore",4),rep("Offshore",4)),c(inshore_chl2, offshore_chl2)))
View(chl_mean2)
str(chl_mean2)
chl_mean2$V1
chl_mean2$V2 <- as.numeric(chl_mean2$V2)
str(chl_mean2)
inshore_chl2 <- apply(inshore_chl, 1, mean, na.rm = TRUE)
offshore_chl2 <- apply(offshore_chl, 1, mean, na.rm = TRUE)
chl_mean2 <- as.data.frame(cbind(c(rep("Inshore",4),rep("Offshore",4)),c(inshore_chl2, offshore_chl2)))
chl_mean2$V2 <- as.numeric(as.character(chl_mean2$V2))
str(chl_mean2)
bartlett.test(V2 ~ V1, data = chl_mean2) #variances not sig. different
t.test(V2 ~ V1, data = chl_mean2, var.equal = TRUE, paired = FALSE) #df = 6, p-value = 0.0018
inshore_atten2 <- apply(inshore_atten, 1, mean, na.rm = TRUE)
offshore_atten2 <- apply(offshore_atten, 1, mean, na.rm = TRUE)
chl_mean2 <- as.data.frame(cbind(c(rep("Inshore",4),rep("Offshore",4)),c(inshore_atten2, offshore_atten2)))
atten_mean2 <- as.data.frame(cbind(c(rep("Inshore",4),rep("Offshore",4)),c(inshore_atten2, offshore_atten2)))
atten_mean2$V2 <- as.numeric(as.character(atten_mean2$V2))
atten_mean2
bartlett.test(V2 ~ V1, data = atten_mean2) #variances not sig. different
t.test(V2 ~ V1, data = atten_mean2, var.equal = TRUE, paired = FALSE) #df = 6, p-value
View(atten_mean2)
atten_corals <- extract(atten_stack_crop, corals2[,1:2])
rownames(atten_corals) <- corals$IDnumber
offshore_atten <- atten_corals[c(1:2,5:6),]
inshore_atten <- atten_corals[c(3:4,7:8),]
offshore_atten_mean <- mean(offshore_atten, na.rm=TRUE)
offshore_atten_se <- sd(offshore_atten, na.rm=TRUE)/sqrt(44)
inshore_atten_mean <- mean(inshore_atten, na.rm=TRUE)
inshore_atten_se <- sd(inshore_atten, na.rm=TRUE)/sqrt(42)
atten_summary1 <- as.numeric(rbind(inshore_atten_mean,offshore_atten_mean))
atten_summary2 <- as.numeric(rbind(inshore_atten_se,offshore_atten_se))
atten_summary <- cbind(atten_summary1, atten_summary2, c("Inshore", "Offshore"))
colnames(atten_summary) <- c("Mean", "SEM", "Location")
atten_summary <- as.data.frame(atten_summary)
atten_summary$Mean <- as.numeric(as.character(atten_summary$Mean))
atten_summary$SEM <- as.numeric(as.character(atten_summary$SEM))
inshore_atten2 <- apply(inshore_atten, 1, mean, na.rm = TRUE)
offshore_atten2 <- apply(offshore_atten, 1, mean, na.rm = TRUE)
atten_mean2 <- as.data.frame(cbind(c(rep("Inshore",4),rep("Offshore",4)),c(inshore_atten2, offshore_atten2)))
atten_mean2$V2 <- as.numeric(as.character(atten_mean2$V2))
bartlett.test(V2 ~ V1, data = atten_mean2) #variances not sig. different
t.test(V2 ~ V1, data = atten_mean2, var.equal = TRUE, paired = FALSE) #df = 6, p-value = 0.08306
chla_corals <- extract(chla_stack_crop, corals2[,1:2])
rownames(chla_corals) <- corals$IDnumber
offshore_chl <- chla_corals[c(1:2,5:6),]
inshore_chl <- chla_corals[c(3:4,7:8),]
offshore_chl_mean <- mean(offshore_chl, na.rm=TRUE)
offshore_chl_se <- sd(offshore_chl, na.rm=TRUE)/sqrt(44)
inshore_chl_mean <- mean(inshore_chl, na.rm=TRUE)
inshore_chl_se <- sd(inshore_chl, na.rm=TRUE)/sqrt(42)
chla_summary1 <- as.numeric(rbind(inshore_chl_mean,offshore_chl_mean))
chla_summary2 <- as.numeric(rbind(inshore_chl_se,offshore_chl_se))
chla_summary <- cbind(chla_summary1, chla_summary2, c("Inshore", "Offshore"))
colnames(chla_summary) <- c("Mean", "SEM", "Location")
chla_summary <- as.data.frame(chla_summary)
chla_summary$Mean <- as.numeric(as.character(chla_summary$Mean))
chla_summary$SEM <- as.numeric(as.character(chla_summary$SEM))
inshore_chl2 <- apply(inshore_chl, 1, mean, na.rm = TRUE)
offshore_chl2 <- apply(offshore_chl, 1, mean, na.rm = TRUE)
chl_mean2 <- as.data.frame(cbind(c(rep("Inshore",4),rep("Offshore",4)),c(inshore_chl2, offshore_chl2)))
chl_mean2$V2 <- as.numeric(as.character(chl_mean2$V2))
#test for homogeneity of variances differences between locations
bartlett.test(V2 ~ V1, data = chl_mean2) #variances not sig. different
t.test(V2 ~ V1, data = chl_mean2, var.equal = TRUE, paired = FALSE) #df = 6, p-value = 0.1165
